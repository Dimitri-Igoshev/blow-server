// mailing.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, FilterQuery } from 'mongoose';
import { MailerService } from '@nestjs-modules/mailer';
import { format } from 'date-fns';

import { User, UserDocument, UserStatus } from '../user/entities/user.entity';
import { BonusMailDto, BulkMailDto } from './dto/mailing.dto';

@Injectable()
export class EmailingService {
  private readonly logger = new Logger(EmailingService.name);

  constructor(
    private readonly mailerService: MailerService,
    @InjectModel(User.name) private readonly userModel: Model<UserDocument>,
  ) {}

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.
   * –§–∏–ª—å—Ç—Ä—ã: —Å—Ç–∞—Ç—É—Å, –ø–æ–ª. –¢–µ–∫—Å—Ç/—Ç–µ–º–∞/CTA –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è.
   * –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏: 5‚Äì10 —Å–µ–∫—É–Ω–¥ (—Ä–∞–Ω–¥–æ–º).
   */
  async sendBulkMail(dto: BulkMailDto) {
    const {
      subject,
      text,
      status = UserStatus.ALL,
      sex,
      dryRun = false,
      limit,
      from = 'support@blow.ru',
      ctaLink = 'https://blow.ru',
      ctaText = '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
    } = dto;

    const filter: FilterQuery<UserDocument> = {
      email: { $exists: true, $ne: null },
    };
    if (status && status !== UserStatus.ALL) filter.status = status;
    if (sex) filter.sex = sex;

    const total = await this.userModel.countDocuments(filter);
    const toSend = typeof limit === 'number' ? Math.min(limit, total) : total;

    if (dryRun) {
      return {
        dryRun: true,
        totalMatched: total,
        willSend: toSend,
        filter,
      };
    }

    const cursor = this.userModel
      .find(filter, { email: 1, firstName: 1, lastName: 1 })
      .sort({ _id: 1 })
      .lean()
      .cursor();

    let sent = 0;
    let failed = 0;
    const nowStr = new Date().toISOString();

    for await (const user of cursor) {
      if (typeof limit === 'number' && sent + failed >= limit) break;

      try {
        await this.mailerService.sendMail({
          to: user.email,
          from,
          subject,
          text: this.buildPlainText(user, text, ctaText, ctaLink),
          html: this.buildHtml(user, text, ctaText, ctaLink),
        });

        await this.userModel
          .updateOne({ _id: user._id }, { $set: { lastMailing: nowStr } })
          .exec();

        sent++;
        this.logger.log(`‚úÖ Mail sent to ${user.email}`);
      } catch (e: any) {
        failed++;
        this.logger.warn(`Mail to ${user.email} failed: ${e?.message ?? e}`);
      }

      // –∏–Ω—Ç–µ—Ä–≤–∞–ª 5‚Äì10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏—Å—å–º–æ–º
      await randomDelay(5, 10);
    }

    return {
      dryRun: false,
      totalMatched: total,
      attempted: toSend,
      sent,
      failed,
    };
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +500) + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–æ–º.
   * –§–∏–ª—å—Ç—Ä—ã: —Å—Ç–∞—Ç—É—Å/–ø–æ–ª. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dryRun –∏ limit.
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É, —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5‚Äì10 —Å–µ–∫.
   */
  async sendBonusAndNotify(dto: BonusMailDto) {
    const {
      subject,
      text,
      status = UserStatus.ALL,
      sex,
      dryRun = false,
      limit,
      from = 'support@blow.ru',
      ctaLink = 'https://blow.ru',
      ctaText = '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
      amount = 500,
    } = dto;

    const filter: FilterQuery<UserDocument> = {
      email: { $exists: true, $ne: null },
    };
    if (status && status !== UserStatus.ALL) filter.status = status;
    if (sex) filter.sex = sex;

    const total = await this.userModel.countDocuments(filter);
    const toProcess =
      typeof limit === 'number' ? Math.min(limit, total) : total;

    if (dryRun) {
      return {
        dryRun: true,
        totalMatched: total,
        willAffect: toProcess,
        bonusAmount: amount,
        filter,
      };
    }

    const cursor = this.userModel
      .find(filter, { email: 1, firstName: 1, lastName: 1 })
      .sort({ _id: 1 })
      .lean()
      .cursor();

    let credited = 0;
    let mailed = 0;
    let failedCredit = 0;
    let failedMail = 0;

    const nowStr = new Date().toISOString();

    for await (const user of cursor) {
      if (typeof limit === 'number' && credited + failedCredit >= limit) break;

      // –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
      try {
        await this.userModel
          .updateOne({ _id: user._id }, { $inc: { balance: amount } })
          .exec();
        credited++;
        this.logger.log(`üí∞ Bonus +${amount} credited to ${user.email}`);
      } catch (e: any) {
        failedCredit++;
        this.logger.warn(
          `Bonus +${amount} to ${user.email} failed: ${e?.message ?? e}`,
        );
        // –µ—Å–ª–∏ –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª—Å—è ‚Äî –ø–∏—Å—å–º–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        continue;
      }

      // –ø–∏—Å—å–º–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      try {
        await this.mailerService.sendMail({
          to: user.email,
          from,
          subject,
          text: this.buildPlainText(user, text, ctaText, ctaLink),
          html: this.buildHtml(user, text, ctaText, ctaLink),
        });

        await this.userModel
          .updateOne({ _id: user._id }, { $set: { lastMailing: nowStr } })
          .exec();

        mailed++;
        this.logger.log(`‚úÖ Mail sent to ${user.email} after bonus`);
      } catch (e: any) {
        failedMail++;
        this.logger.warn(
          `Mail to ${user.email} failed after bonus: ${e?.message ?? e}`,
        );
      }

      await randomDelay(5, 10);
    }

    return {
      dryRun: false,
      totalMatched: total,
      attempted: toProcess,
      bonusAmount: amount,
      credited,
      failedCredit,
      mailed,
      failedMail,
    };
  }

  // ==========================
  // –®–∞–±–ª–æ–Ω—ã –ø–∏—Å—å–º–∞
  // ==========================

  /** Plain-text –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ */
  private buildPlainText(
    recipient: Pick<User, 'firstName' | 'lastName'>,
    bodyText: string,
    ctaText: string,
    ctaLink: string,
  ) {
    const greeting = recipient?.firstName
      ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${recipient.firstName}!`
      : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';

    const footer = `\n‚Äî –ö–æ–º–∞–Ω–¥–∞ BLOW`;
    const ctaLine = ctaLink ? `\n${ctaText}: ${ctaLink}` : '';

    return `${greeting}\n\n${stripHtml(bodyText)}${ctaLine}${footer}`;
  }

  /** HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —Ç–≤–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω) */
  private buildHtml(
    recipient: Pick<User, 'firstName' | 'lastName'>,
    bodyText: string, // –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å HTML
    ctaText: string,
    ctaLink: string,
  ) {
    const formattedDate = format(new Date(), "dd MM yyyy '–≤' HH:mm");
    const greet = recipient?.firstName
      ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${recipient.firstName}!`
      : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';

    const ctaBlock = ctaLink
      ? `
      <table role="presentation" cellpadding="0" cellspacing="0" border="0" align="center" style="margin: 24px 0;">
        <tr>
          <td align="center" bgcolor="#e31e24" style="border-radius: 100px;">
            <a href="${ctaLink}"
               style="display: inline-block; padding: 14px 28px; color: #ffffff; text-decoration: none; font-weight: 600; font-size: 16px;">
              ${ctaText}
            </a>
          </td>
        </tr>
      </table>`
      : '';

    return `
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <title>–ö–æ–º–∞–Ω–¥–∞ BLOW</title>
  </head>
  <body style="margin:0; padding:0; background-color:#f9f9f9;">
    <table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="background-color:#f9f9f9;">
      <tr>
        <td align="center" style="padding: 40px 0;">
          <table role="presentation" cellpadding="0" cellspacing="0" width="600" style="background-color:#ffffff; border-radius:8px; overflow:hidden; font-family: 'Montserrat', Arial, sans-serif;">
            <!-- Header -->
            <tr>
              <td align="center" bgcolor="#e31e24" style="padding: 20px;">
                <img src="https://blow.igoshev.de/blow-logo.png" alt="BLOW Logo" width="160" style="display: block;" />
              </td>
            </tr>

            <!-- Body -->
            <tr>
              <td style="padding: 30px 40px; color: #333333; font-size: 16px; line-height: 1.6;">
                <p style="margin: 0 0 16px 0;">${greet}</p>

                <div style="margin: 0 0 16px 0;">
                  ${bodyText}
                </div>

                ${ctaBlock}

                <p style="margin: 24px 0 0 0; font-size: 14px; color: #666;">
                  –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br/>–∫–æ–º–∞–Ω–¥–∞ <strong>BLOW</strong>
                </p>

                <p style="margin: 30px 0 0 0; font-size: 12px; color: #999;">
                  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ ‚Äî –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.<br/>
                  –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${formattedDate}
                </p>
              </td>
            </tr>

            <!-- Footer -->
            <tr>
              <td align="center" style="padding: 20px; font-size: 12px; color: #999999;">
                ¬© ${new Date().getFullYear()} BLOW. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
              </td>
            </tr>
          </table>

          <style>
            @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap');
          </style>
        </td>
      </tr>
    </table>
  </body>
</html>
    `;
  }
}

// ==========================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ==========================

function stripHtml(html: string) {
  return html?.replace(/<[^>]*>/g, '') ?? '';
}

/** –ü–∞—É–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ */
function sleep(ms: number) {
  return new Promise((res) => setTimeout(res, ms));
}

/** –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç minSec –¥–æ maxSec —Å–µ–∫—É–Ω–¥ */
async function randomDelay(minSec: number, maxSec: number) {
  const min = Math.max(0, Math.floor(minSec));
  const max = Math.max(min, Math.floor(maxSec));
  const ms = (Math.floor(Math.random() * (max - min + 1)) + min) * 1000;
  await sleep(ms);
}
